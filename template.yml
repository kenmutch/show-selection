AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  Stage:
    Type: String
    Description: The Stage

Outputs:
  ShowSelectionsApi:
    Description: The API endpoint
    Value: !Ref ShowSelectionsApi
  ShowSelectionsTableName:
    Description: The show selections table name
    Value: !Ref ShowSelectionsTable
    Export:
      Name: !Sub 'ShowSelectionsTable-${Stage}-export'   
  ShowSelectedEventsTopic:
    Description: The show selected events topic
    Value: !Ref ShowSelectedEventsTopic
    Export:
      Name: 
        Fn::Sub: ShowSelectedEventsTopic-${Stage}-export
  ShowUnselectedEventsTopic:
    Description: The show unselected events topic
    Value: !Ref ShowUnselectedEventsTopic
    Export:
      Name:
        Fn::Sub: ShowUnselectedEventsTopic-${Stage}-export
  
Resources:
  ShowSelectionsApiCf:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Show Selections API
      Name: !Sub 'show-selection-api-${Stage}'
      Body:
        swagger: '2.0'
        info:
          title: Show Selection API
          version: '1.0.0'
        schemes:
          - https
        paths:
          /selected-shows:
            get:
              responses:
                '200':
                  description: 200 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              summary: Select a show
              consumes:
                - application/json
              parameters:
                - in: body
                  name: showSlug
                  description: The id of the show selected.
                  schema:
                    type: string
              responses:
                '204':
                  description: 204 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '204'
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          '/selected-shows/{showSlug}':
            delete:
              parameters:
                - name: showSlug
                  in: path
                  required: true
                  type: string
              responses:
                '200':
                  description: 200 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.id: method.request.path.showSlug
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          CatchupCatchaUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
              - arn:aws:cognito-idp:ap-southeast-2:828944938596:userpool/ap-southeast-2_JS1CQbCvb
  ShowSelectionsApiCfStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Sub '${Stage}'
      RestApiId: !Ref ShowSelectionsApiCf
      DeploymentId: !Ref ShowSelectionsApiCfDeployment
      # MethodSettings:
      #   - '/*/*':
      #     LoggingLevel: INFO
      #     ResourcePath: '/~1${Stage}'
  ShowSelectionsApiCfDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: !Sub 'The ${Stage}'
      StageName: DummyStage
      RestApiId: !Ref ShowSelectionsApiCf

  ShowSelectionsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub '${Stage}'
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Show Selection API
          version: '1.0.0'
        schemes:
          - https
        paths:
          /selected-shows:
            get:
              responses:
                '200':
                  description: 200 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            post:
              summary: Select a show
              consumes:
                - application/json
              parameters:
                - in: body
                  name: showSlug
                  description: The id of the show selected.
                  schema:
                    type: string
              responses:
                '204':
                  description: 204 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '204'
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          '/selected-shows/{showSlug}':
            delete:
              parameters:
                - name: showSlug
                  in: path
                  required: true
                  type: string
              responses:
                '200':
                  description: 200 response
              security: 
                - CatchupCatchaUserPool: 
                  - Fn::Sub: com.catchup-catcha-${Stage}/shows.selected
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.id: method.request.path.showSlug
                uri: 
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowSelectionService.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          CatchupCatchaUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
              - arn:aws:cognito-idp:ap-southeast-2:828944938596:userpool/ap-southeast-2_JS1CQbCvb
  ShowSelectionService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'show-selections-service-${Stage}'
      Handler: src/index.handler
      Runtime: nodejs8.10
      Timeout: 15
      Tracing: Active
      Environment:
        Variables:
          NODE_ENV: !Ref Stage
          TABLE_NAME: !Ref ShowSelectionsTable
          SHOW_SELECTED_EVENTS_TOPIC_ARN: !Ref ShowSelectedEventsTopic
          SHOW_UNSELECTED_EVENTS_TOPIC_ARN: !Ref ShowUnselectedEventsTopic
          APP_NAME: !Sub 'show-selection-service-${Stage}'
          LOG_LEVEL: INFO
      Policies: 
        - AmazonDynamoDBFullAccess
        - AWSXrayWriteOnlyAccess
        - AmazonSNSFullAccess
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /selected-shows
            Method: get
            RestApiId: 
              Ref: ShowSelectionsApi
        PostEvent:
          Type: Api
          Properties:
            Path: /selected-shows
            Method: post
            RestApiId:
              Ref: ShowSelectionsApi
        DeleteEvent:
          Type: Api
          Properties:
            Path: /selected-shows/{showSlug}
            Method: delete
            RestApiId: 
              Ref: ShowSelectionsApi
  ShowSelectionsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub 'show-selections-table-${Stage}'
      AttributeDefinitions: 
        - AttributeName: username
          AttributeType: S
        - AttributeName: showSlug
          AttributeType: S
      KeySchema: 
        - AttributeName: username
          KeyType: HASH
        - AttributeName: showSlug
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1
  ShowSelectedEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'show-selected-events-${Stage}'
      TopicName: !Sub 'show-selected-events-${Stage}'
  ShowUnselectedEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub 'show-unselected-events-${Stage}'
      TopicName: !Sub 'show-unselected-events-${Stage}'